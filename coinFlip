<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coin Toss Game</title>
    <link rel="stylesheet" href="style.css">
<style>

body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    margin: 0;
    background-color: #f0f0f0;
    color: #333;
}

.container {
    background-color: #fff;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    text-align: center;
}

h1 {
    color: #4CAF50;
    margin-bottom: 20px;
}

.coin {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background-color: #ffd700; /* Gold color */
    margin: 20px auto;
    position: relative;
    transform-style: preserve-3d; /* Enable 3D transformations */
    transition: transform 1s ease-out; /* Smooth transition for flips */
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
}

.coin .side {
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: bold;
    font-size: 1.2em;
    backface-visibility: hidden; /* Hide the back of the element when facing away */
}

.coin .heads {
    background-color: #ffd700; /* Gold */
    transform: rotateY(0deg);
}

.coin .tails {
    background-color: #c0c0c0; /* Silver/gray */
    transform: rotateY(180deg); /* Rotate tails side 180 degrees */
}

/* Animation for flipping to Heads */
.coin.flip-heads {
    animation: flipHeads 1.5s forwards ease-out;
}

@keyframes flipHeads {
    0% { transform: rotateY(0deg); }
    100% { transform: rotateY(1800deg); /* 5 full rotations + 0 degrees for heads */ }
}

/* Animation for flipping to Tails */
.coin.flip-tails {
    animation: flipTails 1.5s forwards ease-out;
}

@keyframes flipTails {
    0% { transform: rotateY(0deg); }
    100% { transform: rotateY(1980deg); /* 5 full rotations + 180 degrees for tails */ }
}

button {
    background-color: #4CAF50;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1.1em;
    margin-top: 20px;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #45a049;
}

button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

.result {
    margin-top: 20px;
    font-size: 1.5em;
    font-weight: bold;
    color: #333;
}

</style>

</head>
<body>
    <div class="container">
        <h1>Coin Toss</h1>
        <div class="coin" id="coin">
            <div class="side heads">Heads</div>
            <div class="side tails">Tails</div>
        </div>
        <button id="flipButton">Flip Coin</button>
        <p class="result" id="result"></p>
    </div>

    <script>

document.addEventListener('DOMContentLoaded', () => {
    const flipButton = document.getElementById('flipButton');
    const coin = document.getElementById('coin');
    const resultDisplay = document.getElementById('result');

    flipButton.addEventListener('click', () => {
        // Clear previous animation classes
        coin.classList.remove('flip-heads', 'flip-tails');

        // Disable button during animation
        flipButton.disabled = true;
        resultDisplay.textContent = "Flipping...";

        // Randomly determine outcome
        const outcome = Math.random() < 0.5 ? 'Heads' : 'Tails'; // 50/50 chance

        // Set a timeout to apply the flip animation after a short delay
        // This slight delay ensures the previous class removal takes effect
        setTimeout(() => {
            if (outcome === 'Heads') {
                coin.classList.add('flip-heads');
            } else {
                coin.classList.add('flip-tails');
            }
        }, 50); // A small delay, e.g., 50 milliseconds

        // Listen for the end of the animation
        coin.addEventListener('animationend', () => {
            resultDisplay.textContent = `It's ${outcome}!`;
            flipButton.disabled = false; // Re-enable the button
        }, { once: true }); // Use { once: true } to remove the listener after it fires
    });
});

</script>
</body>
</html>
